generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Make sure to set your database URL in .env
}

model User {
  id              String           @id @default(uuid())
  username        String           @unique
  firstName       String?
  lastName        String?
  email           String           @unique
  passwordHash    String
  createdAt       DateTime         @default(now())
  tasks           Task[]
  events          Event[]
  stats           Stats?
  achievements    Achievement[]
  notifications   Notification[]
  picture         String?
  Preferences     Preferences[]
  CustomCategory  CustomCategory[]
  UserPreferences UserPreferences?
}

model Stats {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  strength     Int      @default(0)
  intelligence Int      @default(0)
  charisma     Int      @default(0)
  dexterity    Int      @default(0)
  endurance    Int      @default(0)
  vitality     Int      @default(0)
  lastUpdated  DateTime @default(now())
  userId       String   @unique // Ensure that each Stats entry is associated with only one User
}

model Task {
  id                 String          @id @default(uuid())
  user               User            @relation(fields: [userId], references: [id])
  userId             String
  description        String
  title              String
  category           Category?
  customCategory     CustomCategory? @relation(fields: [customCategoryId], references: [id])
  negativeTask       Boolean         @default(false)
  experiencePoints   Int             @default(0)
  goldReward         Int             @default(0)
  startDate          DateTime
  dueDate            DateTime
  createdAt          DateTime
  status             TaskStatus
  strengthReward     Int?
  intelligenceReward Int?
  vitalityReward     Int?
  charismaReward     Int?
  enduranceReward    Int?
  dexterityReward    Int?
  difficulty         Int
  importance         Int
  repeatable         Boolean         @default(false)
  repeatDays         Int?            @default(0)
  repeatWeeks        Int?            @default(0)
  repeatMonths       Int?            @default(0)
  repeatYears        Int?            @default(0)
  repeatUntil        DateTime?
  customCategoryId   String?
  hoursBeforeWarning Int             @default(3)
  hoursBeforeDue     Int             @default(1)
}

model CustomCategory {
  id               String  @id @default(uuid())
  name             String
  description      String?
  user             User    @relation(fields: [userId], references: [id])
  userId           String
  strengthRate     Decimal @default(0)
  intelligenceRate Decimal @default(0)
  charismaRate     Decimal @default(0)
  dexterityRate    Decimal @default(0)
  enduranceRate    Decimal @default(0)
  color            String
  Task             Task[]
}

model UserPreferences {
  id                 String     @id @default(uuid())
  user               User       @relation(fields: [userId], references: [id])
  userId             String     @unique
  primaryColor       String
  secondaryColor     String
  actionButtonsSide  Side
  actionButtonsSize  Decimal    @default(0.5)
  theme              Theme
  language           String     @default("en")
  timezone           String     @default("UTC")
  dateFormat         DateFormat @default(YYYY_MM_DD)
  timeFormat         timeFormat @default(HH_mm)
  showNotifications  Boolean    @default(true)
  showAnimations     Boolean    @default(true)
  hoursBeforeWarning Int        @default(3)
  hoursBeforeDue     Int        @default(1)
}

enum DateFormat {
  YYYY_MM_DD
  DD_MM_YYYY
  MM_DD_YYYY
}

enum timeFormat {
  HH_mm
  hh_mm_a
  HH_mm_ss
}

enum Theme {
  light
  dark
}

enum Side {
  left
  right
}

model Event {
  id          String   @id @default(uuid())
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  picture     String
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?
}

model Achievement {
  id          String @id @default(uuid())
  name        String
  description String
  criteria    String
  rewardExp   Int
  rewardGold  Int
  user        User   @relation(fields: [userId], references: [id])
  userId      String
}

model Notification {
  id               String           @id @default(uuid())
  user             User             @relation(fields: [userId], references: [id])
  userId           String
  message          String
  notificationType NotificationType
  isRead           Boolean          @default(false)
  createdAt        DateTime
  notifyAt         DateTime
}

model Preferences {
  id            String  @id @default(uuid())
  user          User    @relation(fields: [userId], references: [id])
  userId        String
  darkMode      Boolean @default(false)
  notifications Boolean @default(true)
  primaryColor  String  @default("#000000")
}

enum TaskStatus {
  incomplete
  completed
  failed
  cancelled
}

enum Category {
  physical
  mental
  social
  household
  personal_development
  work
  school
}

enum NotificationType {
  task_reminder
  event_reminder
  achievement_unlocked
  level_increased
}
