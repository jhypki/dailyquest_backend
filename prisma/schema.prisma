generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Make sure to set your database URL in .env
}

model User {
  id             String           @id @default(uuid())
  username       String           @unique
  firstName      String?
  lastName       String?
  email          String           @unique
  passwordHash   String
  createdAt      DateTime         @default(now())
  tasks          Task[]
  events         Event[]
  stats          Stats?
  achievements   Achievement[]
  notifications  Notification[]
  picture        String?
  Preferences    Preferences[]
  CustomCategory CustomCategory[]
}

model Stats {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  strength     Int      @default(0)
  intelligence Int      @default(0)
  charisma     Int      @default(0)
  dexterity    Int      @default(0)
  endurance    Int      @default(0)
  vitality     Int      @default(0)
  lastUpdated  DateTime @default(now())
  userId       String   @unique // Ensure that each Stats entry is associated with only one User
}

model Task {
  id                 String     @id @default(uuid())
  user               User       @relation(fields: [userId], references: [id])
  userId             String
  description        String
  title              String
  category           Category
  negativeTask       Boolean    @default(false)
  startDate          DateTime
  dueDate            DateTime
  createdAt          DateTime
  status             TaskStatus
  difficulty         Int        @default(1)
  strengthReward     Int?
  intelligenceReward Int?
  vitalityReward     Int?
  charismaReward     Int?
  enduranceReward    Int?
  agilityReward      Int?
}

model Event {
  id          String   @id @default(uuid())
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  picture     String
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?
}

model Achievement {
  id          String @id @default(uuid())
  name        String
  description String
  criteria    String
  rewardExp   Int
  rewardGold  Int
  user        User   @relation(fields: [userId], references: [id])
  userId      String
}

model Notification {
  id               String           @id @default(uuid())
  user             User             @relation(fields: [userId], references: [id])
  userId           String
  message          String
  notificationType NotificationType
  isRead           Boolean          @default(false)
  createdAt        DateTime
  notifyAt         DateTime
}

model Preferences {
  id            String  @id @default(uuid())
  user          User    @relation(fields: [userId], references: [id])
  userId        String
  darkMode      Boolean @default(false)
  notifications Boolean @default(true)
  primaryColor  String  @default("#000000")
}

model CustomCategory {
  id                     String  @id @default(uuid())
  name                   String
  description            String
  user                   User    @relation(fields: [userId], references: [id])
  userId                 String
  strengthMultiplier     Decimal
  intelligenceMultiplier Decimal
  charismaMultiplier     Decimal
  dexterityMultiplier    Decimal
  enduranceMultiplier    Decimal
  vitalityMultiplier     Decimal
  color                  String
  icon                   String
}

enum TaskStatus {
  pending
  in_progress
  completed
  failed
  cancelled
}

enum Category {
  physical
  mental
  social
  creative
  personal_development
  professional
}

enum NotificationType {
  task_reminder
  event_reminder
  achievement_unlocked
  level_increased
}
